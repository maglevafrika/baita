{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2 py-0.5 text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,oKACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/applicants/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport React, { useState, useMemo } from 'react';\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n  type SortingState,\n  type ColumnFiltersState,\n  type VisibilityState,\n} from \"@tanstack/react-table\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Loader2, PlusCircle, UserCheck, ChevronDown, Upload, CalendarPlus, XCircle, CheckCircle } from 'lucide-react';\nimport { useApplicants, ApplicantsProvider } from '@/context/applicants-context';\nimport type { Applicant } from '@/lib/types';\nimport { format } from 'date-fns';\nimport { Badge } from '@/components/ui/badge';\n\n// --- Dialog Components (Placeholders for now, will be implemented) ---\nconst ApplicantDialog = ({ isOpen, onOpenChange, applicant }: { isOpen: boolean, onOpenChange: (open: boolean) => void, applicant?: Applicant | null }) => <div>Applicant Dialog</div>;\nconst ImportApplicantsDialog = ({ isOpen, onOpenChange }: { isOpen: boolean, onOpenChange: (open: boolean) => void }) => <div>Import Dialog</div>;\nconst ScheduleInterviewDialog = ({ isOpen, onOpenChange, selectedApplicants }: { isOpen: boolean, onOpenChange: (open: boolean) => void, selectedApplicants: Applicant[] }) => <div>Schedule Interview Dialog</div>;\nconst EvaluationDialog = ({ isOpen, onOpenChange, applicant }: { isOpen: boolean, onOpenChange: (open: boolean) => void, applicant: Applicant | null }) => <div>Evaluation Dialog</div>;\nconst CancelApplicationDialog = ({ isOpen, onOpenChange, applicant }: { isOpen: boolean, onOpenChange: (open: boolean) => void, applicant: Applicant | null }) => <div>Cancel Dialog</div>;\n\n\n// --- Main Page Component ---\n\nfunction ApplicantsPageContent() {\n  const { applicants, loading } = useApplicants();\n  const [sorting, setSorting] = useState<SortingState>([]);\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});\n  const [rowSelection, setRowSelection] = useState({});\n\n  // Dialog States\n  const [isApplicantDialogOpen, setIsApplicantDialogOpen] = useState(false);\n  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false);\n  const [isScheduleDialogOpen, setIsScheduleDialogOpen] = useState(false);\n  const [isEvaluationDialogOpen, setIsEvaluationDialogOpen] = useState(false);\n  const [isCancelDialogOpen, setIsCancelDialogOpen] = useState(false);\n  \n  const [selectedApplicant, setSelectedApplicant] = useState<Applicant | null>(null);\n  \n  const handleAddNew = () => {\n    setSelectedApplicant(null);\n    setIsApplicantDialogOpen(true);\n  };\n\n  const handleEdit = (applicant: Applicant) => {\n    setSelectedApplicant(applicant);\n    setIsApplicantDialogOpen(true);\n  };\n\n  const handleEvaluate = (applicant: Applicant) => {\n    setSelectedApplicant(applicant);\n    setIsEvaluationDialogOpen(true);\n  };\n\n  const handleCancel = (applicant: Applicant) => {\n    setSelectedApplicant(applicant);\n    setIsCancelDialogOpen(true);\n  };\n\n  const statusVariant = (status: Applicant['status']): \"default\" | \"secondary\" | \"destructive\" | \"outline\" => {\n    switch (status) {\n      case 'approved': return 'default';\n      case 'rejected':\n      case 'cancelled':\n        return 'destructive';\n      default:\n        return 'secondary';\n    }\n  }\n\n  const columns: ColumnDef<Applicant>[] = [\n    // Select Checkbox Column\n    {\n      id: \"select\",\n      header: ({ table }) => (\n        <input\n          type=\"checkbox\"\n          checked={table.getIsAllPageRowsSelected()}\n          onChange={(value) => table.toggleAllPageRowsSelected(!!value.target.checked)}\n          aria-label=\"Select all\"\n          className=\"translate-y-[2px]\"\n        />\n      ),\n      cell: ({ row }) => (\n        <input\n          type=\"checkbox\"\n          checked={row.getIsSelected()}\n          onChange={(value) => row.toggleSelected(!!value.target.checked)}\n          aria-label=\"Select row\"\n          className=\"translate-y-[2px]\"\n        />\n      ),\n      enableSorting: false,\n      enableHiding: false,\n    },\n    // Main Columns\n    { accessorKey: \"name\", header: \"Name\" },\n    { accessorKey: \"instrumentInterest\", header: \"Instrument\" },\n    { \n      accessorKey: \"status\", \n      header: \"Status\",\n      cell: ({ row }) => {\n        const status = row.original.status;\n        return <Badge variant={statusVariant(status)} className=\"capitalize\">{status.replace(/-/g, ' ')}</Badge>\n      }\n    },\n    { \n      accessorKey: \"applicationDate\", \n      header: \"Applied On\",\n      cell: ({ row }) => format(new Date(row.original.applicationDate), \"PPP\")\n    },\n    {\n      id: \"interview\",\n      header: \"Interview\",\n      cell: ({ row }) => {\n        const { interviewDate, interviewTime, interviewer } = row.original;\n        if (!interviewDate) return <span className=\"text-muted-foreground\">Not Scheduled</span>;\n        return (\n          <div>\n            <p>{format(new Date(interviewDate), \"PPP\")} at {interviewTime}</p>\n            <p className=\"text-sm text-muted-foreground\">with {interviewer}</p>\n          </div>\n        )\n      }\n    },\n    // Actions Column\n    {\n      id: \"actions\",\n      cell: ({ row }) => {\n        const applicant = row.original;\n        const canBeScheduled = ['pending-review', 'evaluated'].includes(applicant.status);\n        const canBeEvaluated = ['interview-scheduled', 're-evaluation'].includes(applicant.status);\n\n        return (\n           <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                <span className=\"sr-only\">Open menu</span>\n                <ChevronDown className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuCheckboxItem onClick={() => handleEdit(applicant)}>Edit Applicant</DropdownMenuCheckboxItem>\n              {canBeScheduled && <DropdownMenuCheckboxItem onClick={() => setIsScheduleDialogOpen(true)}>Schedule Interview</DropdownMenuCheckboxItem>}\n              {canBeEvaluated && <DropdownMenuCheckboxItem onClick={() => handleEvaluate(applicant)}>Evaluate</DropdownMenuCheckboxItem>}\n              <DropdownMenuCheckboxItem onClick={() => handleCancel(applicant)} className=\"text-destructive focus:text-destructive\">Cancel Application</DropdownMenuCheckboxItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        );\n      },\n    },\n  ];\n\n  const table = useReactTable({\n    data: applicants,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  });\n  \n  const selectedApplicants = useMemo(() => {\n    return table.getFilteredSelectedRowModel().rows.map(row => row.original);\n  }, [rowSelection, table]);\n\n\n  if (loading) {\n    return <div className=\"flex h-[80vh] items-center justify-center\"><Loader2 className=\"h-8 w-8 animate-spin text-primary\" /></div>;\n  }\n\n  return (\n     <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold font-headline flex items-center gap-2\">\n          <UserCheck className=\"w-8 h-8\" />\n          Applicant Management\n        </h1>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" onClick={() => setIsImportDialogOpen(true)}><Upload className=\"mr-2\"/> Import</Button>\n          <Button onClick={handleAddNew}><PlusCircle className=\"mr-2\" /> Add New Applicant</Button>\n        </div>\n      </div>\n      \n      {/* Toolbar */}\n      <div className=\"flex items-center justify-between\">\n        <Input\n          placeholder=\"Filter by name...\"\n          value={(table.getColumn(\"name\")?.getFilterValue() as string) ?? \"\"}\n          onChange={(event) => table.getColumn(\"name\")?.setFilterValue(event.target.value)}\n          className=\"max-w-sm\"\n        />\n        <div className=\"flex items-center gap-2\">\n          {selectedApplicants.length > 0 && (\n            <Button variant=\"outline\" onClick={() => setIsScheduleDialogOpen(true)}>\n              <CalendarPlus className=\"mr-2\" />\n              Schedule Interview ({selectedApplicants.length})\n            </Button>\n          )}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" className=\"ml-auto\">\n                Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              {table.getAllColumns().filter((column) => column.getCanHide()).map((column) => (\n                <DropdownMenuCheckboxItem\n                  key={column.id}\n                  className=\"capitalize\"\n                  checked={column.getIsVisible()}\n                  onCheckedChange={(value) => column.toggleVisibility(!!value)}\n                >\n                  {column.id}\n                </DropdownMenuCheckboxItem>\n              ))}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n\n      {/* Table */}\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id} data-state={row.getIsSelected() && \"selected\"}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n       {/* Pagination */}\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <div className=\"flex-1 text-sm text-muted-foreground\">\n          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n          {table.getFilteredRowModel().rows.length} row(s) selected.\n        </div>\n        <div className=\"space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            Previous\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n\n      {/* Dialogs */}\n      <ApplicantDialog isOpen={isApplicantDialogOpen} onOpenChange={setIsApplicantDialogOpen} applicant={selectedApplicant} />\n      <ImportApplicantsDialog isOpen={isImportDialogOpen} onOpenChange={setIsImportDialogOpen} />\n      <ScheduleInterviewDialog isOpen={isScheduleDialogOpen} onOpenChange={setIsScheduleDialogOpen} selectedApplicants={selectedApplicants} />\n      <EvaluationDialog isOpen={isEvaluationDialogOpen} onOpenChange={setIsEvaluationDialogOpen} applicant={selectedApplicant} />\n      <CancelApplicationDialog isOpen={isCancelDialogOpen} onOpenChange={setIsCancelDialogOpen} applicant={selectedApplicant} />\n    </div>\n  )\n}\n\n\nexport default function ApplicantsPage() {\n  return (\n    <ApplicantsProvider>\n      <ApplicantsPageContent />\n    </ApplicantsProvider>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}